import {z}from'zod';var s=z.enum(["registry:lib","registry:block","registry:component","registry:ui","registry:hook","registry:page","registry:file","registry:theme","registry:style","registry:item","registry:example","registry:internal"]),n=z.discriminatedUnion("type",[z.object({path:z.string(),content:z.string().optional(),type:z.enum(["registry:file","registry:page"]),target:z.string()}),z.object({path:z.string(),content:z.string().optional(),type:s.exclude(["registry:file","registry:page"]),target:z.string().optional()})]),o=z.object({config:z.object({content:z.array(z.string()).optional(),theme:z.record(z.string(),z.any()).optional(),plugins:z.array(z.string()).optional()}).optional()}),r=z.object({theme:z.record(z.string(),z.string()).optional(),light:z.record(z.string(),z.string()).optional(),dark:z.record(z.string(),z.string()).optional()}),a=z.record(z.string(),z.lazy(()=>z.union([z.string(),z.record(z.string(),z.union([z.string(),z.record(z.string(),z.string())]))]))),g=z.record(z.string(),z.string()),i=z.object({$schema:z.string().optional(),extends:z.string().optional(),name:z.string(),type:s,title:z.string().optional(),author:z.string().min(2).optional(),description:z.string().optional(),dependencies:z.array(z.string()).optional(),devDependencies:z.array(z.string()).optional(),registryDependencies:z.array(z.string()).optional(),files:z.array(n).optional(),tailwind:o.optional(),cssVars:r.optional(),css:a.optional(),envVars:g.optional(),meta:z.record(z.string(),z.any()).optional(),docs:z.string().optional(),categories:z.array(z.string()).optional()}),h=z.object({name:z.string(),homepage:z.string(),items:z.array(i)}),u=z.array(i),b=z.array(z.object({name:z.string(),label:z.string()})),f=z.record(z.string(),z.record(z.string(),z.string())),x=z.object({inlineColors:z.object({light:z.record(z.string(),z.string()),dark:z.record(z.string(),z.string())}),cssVars:r,cssVarsV4:r.optional(),inlineColorsTemplate:z.string(),cssVarsTemplate:z.string()}),S=i.pick({dependencies:true,devDependencies:true,files:true,tailwind:true,cssVars:true,css:true,envVars:true,docs:true}),c=z.union([z.string().refine(e=>e.includes("{name}"),{message:"Registry URL must include {name} placeholder"}),z.object({url:z.string().refine(e=>e.includes("{name}"),{message:"Registry URL must include {name} placeholder"}),params:z.record(z.string(),z.string()).optional(),headers:z.record(z.string(),z.string()).optional()})]),l=z.record(z.string().refine(e=>e.startsWith("@"),{message:"Registry names must start with @ (e.g., @v0, @acme)"}),c),p=z.object({$schema:z.string().optional(),style:z.string(),rsc:z.coerce.boolean().default(false),tsx:z.coerce.boolean().default(true),tailwind:z.object({config:z.string().optional(),css:z.string(),baseColor:z.string(),cssVariables:z.boolean().default(true),prefix:z.string().default("").optional()}),iconLibrary:z.string().optional(),aliases:z.object({components:z.string(),utils:z.string(),ui:z.string().optional(),lib:z.string().optional(),hooks:z.string().optional()}),registries:l.optional()}).strict(),m=p.extend({resolvedPaths:z.object({cwd:z.string(),tailwindConfig:z.string(),tailwindCss:z.string(),utils:z.string(),components:z.string(),lib:z.string(),hooks:z.string(),ui:z.string()})}),j=z.record(m),y=z.object({name:z.string(),type:z.string().optional(),description:z.string().optional(),registry:z.string(),addCommandArgument:z.string()}),C=z.object({pagination:z.object({total:z.number(),offset:z.number(),limit:z.number(),hasMore:z.boolean()}),items:z.array(y)});export{s as a,n as b,o as c,r as d,a as e,g as f,i as g,h,u as i,b as j,f as k,x as l,S as m,c as n,l as o,p,m as q,j as r,y as s,C as t};//# sourceMappingURL=chunk-VVOKVGPU.js.map
//# sourceMappingURL=chunk-VVOKVGPU.js.map